"""
This file defines the database models
"""

import datetime
from .common import db, Field, auth
from pydal.validators import *
from pydal.validators import IS_URL

def get_user_email():
    return auth.current_user.get('email') if auth.current_user else None


def get_time():
    return datetime.datetime.utcnow()


# Define your table below
#
# db.define_table('thing', Field('name'))
#
# always commit your models to avoid problems later


db.define_table('pantry',
                Field('user_id', 'reference auth_user'),
                Field('item', requires=IS_NOT_EMPTY()),
                # Field('quantity', 'float', requires=IS_FLOAT_IN_RANGE(0, 1e6)),
                )

# Here is an ideal recipes database schema? May be hard to parse an AI response into these fields
# The recipes table holds all recipes generated by AI or manually by users
# db.define_table('recipes',
#                 Field('created_by', 'reference auth_user'),
#                 Field('title', 'string', requires=IS_NOT_EMPTY()),
#                 Field('description', 'text'),
#                 Field('ingredients', 'list:string'),
#                 Field('instructions', 'text'),
#                 Field('created_at', 'datetime', default=get_time()),
#                 )

# Here is a simplified recipes table that can easily hold an AI response as a string
db.define_table('recipes',
                Field('created_by', 'reference auth_user'),
                Field('title', 'text'),
                Field('ingredients', 'list:string'),
                Field('instructions', 'list:string'),
                Field('created_at', 'datetime', default=get_time()),
                )

# The stared_recipe table holds relationships between users and a recipe they have starred
# Querry all the stared recipes for a user by asking for all records where user=user
db.define_table('favorites',
                Field('user_id', 'reference auth_user'),
                Field('title', 'text'),
                Field('ingredients', 'list:string'),
                Field('instructions', 'list:string'),
                Field('pinned', 'boolean', default=False),
                Field('favorited_at', 'datetime', default=get_time()),
                )
# FOR THE COMMIT MESSAGE LATER
# Add a new field for storing the image reference in the "favorites" table
# In the code above, we added the image_reference field of type string to the "favorites" table. 
# The field is set to require a valid URL for storing the image reference.

db.commit()
